// pluggy-manager-corrigido.js
// Vers√£o corrigida que usa "apiKey" em vez de "accessToken"

class PluggyManager {
    constructor(config) {
        this.config = config;
        this.apiKey = null;
        this.tokenExpiry = null;
        console.log('üîß PluggyManager inicializado com config:', config);
    }

    async authenticate() {
        try {
            console.log('üîÑ Iniciando autentica√ß√£o...');
            
            const requestBody = {
                clientId: this.config.clientId,
                clientSecret: this.config.clientSecret
            };
            
            console.log('üì§ Enviando requisi√ß√£o de autentica√ß√£o...');
            
            const response = await fetch(`${this.config.baseURL}/auth`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify(requestBody)
            });

            console.log('üì• Status:', response.status);

            if (!response.ok) {
                const errorText = await response.text();
                console.error('‚ùå Erro de autentica√ß√£o:', response.status, errorText);
                throw new Error(`Erro de autentica√ß√£o: ${response.status} - ${errorText}`);
            }

            const data = await response.json();
            console.log('üì• Response completa:', data);
            
            // CORRE√á√ÉO: Usar "apiKey" em vez de "accessToken"
            if (!data.apiKey) {
                console.error('‚ùå apiKey n√£o encontrado na resposta:', data);
                throw new Error('API Key n√£o recebido');
            }

            this.apiKey = data.apiKey;
            // Definir expira√ß√£o para 1 hora se n√£o especificado
            this.tokenExpiry = Date.now() + (60 * 60 * 1000);
            
            console.log('‚úÖ API Key recebido:', this.apiKey.substring(0, 20) + '...');
            
            // Salvar no localStorage
            localStorage.setItem('pluggy_api_key', this.apiKey);
            localStorage.setItem('pluggy_token_expiry', this.tokenExpiry.toString());
            
            console.log('‚úÖ Autenticado com sucesso!');
            return this.apiKey;
            
        } catch (error) {
            console.error('‚ùå Erro na autentica√ß√£o:', error);
            throw error;
        }
    }

    // Verificar se o token ainda √© v√°lido
    isTokenValid() {
        const valid = this.apiKey && this.tokenExpiry && Date.now() < this.tokenExpiry;
        console.log('üîç API Key v√°lido?', valid);
        return valid;
    }

    // Restaurar token do localStorage
    restoreToken() {
        console.log('üîÑ Tentando restaurar API Key...');
        const apiKey = localStorage.getItem('pluggy_api_key');
        const expiry = localStorage.getItem('pluggy_token_expiry');
        
        if (apiKey && expiry && Date.now() < parseInt(expiry)) {
            this.apiKey = apiKey;
            this.tokenExpiry = parseInt(expiry);
            console.log('‚úÖ API Key restaurado do localStorage');
            return true;
        }
        
        // Limpar tokens expirados
        localStorage.removeItem('pluggy_api_key');
        localStorage.removeItem('pluggy_token_expiry');
        console.log('üóëÔ∏è API Key expirado removido');
        return false;
    }

    // Fazer requisi√ß√£o autenticada
    async makeAuthenticatedRequest(endpoint, options = {}) {
        console.log(`üîÑ Fazendo requisi√ß√£o para: ${endpoint}`);
        
        // Verificar se precisa autenticar
        if (!this.isTokenValid()) {
            console.log('üîÑ API Key inv√°lido, autenticando...');
            await this.authenticate();
        }

        const url = `${this.config.baseURL}${endpoint}`;
        const requestOptions = {
            headers: {
                'X-API-KEY': this.apiKey, // CORRE√á√ÉO: Usar X-API-KEY em vez de Authorization
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                ...options.headers
            },
            ...options
        };

        console.log(`üì§ Requisi√ß√£o para: ${url}`);
        console.log(`üì§ Headers:`, requestOptions.headers);
        
        const response = await fetch(url, requestOptions);
        
        console.log(`üì• Resposta de ${endpoint}:`);
        console.log(`üì• Status:`, response.status);
        
        if (!response.ok) {
            const errorText = await response.text();
            console.error(`‚ùå Erro na requisi√ß√£o ${endpoint}:`, response.status, errorText);
            
            // Se API Key expirou, tentar reautenticar
            if (response.status === 401 || response.status === 403) {
                console.log('üîÑ API Key expirado, reautenticando...');
                await this.authenticate();
                // Tentar novamente com novo API Key
                requestOptions.headers['X-API-KEY'] = this.apiKey;
                const retryResponse = await fetch(url, requestOptions);
                if (!retryResponse.ok) {
                    const retryError = await retryResponse.text();
                    console.error('‚ùå Erro ap√≥s reautentica√ß√£o:', retryResponse.status, retryError);
                    throw new Error(`Erro ap√≥s reautentica√ß√£o: ${retryResponse.status} - ${retryError}`);
                }
                const retryData = await retryResponse.json();
                console.log('‚úÖ Sucesso ap√≥s reautentica√ß√£o:', retryData);
                return retryData;
            }
            
            throw new Error(`Erro ${response.status}: ${errorText}`);
        }

        const data = await response.json();
        console.log(`‚úÖ Dados recebidos de ${endpoint}:`, data);
        return data;
    }

    // Conectores (Bancos)
    async getConnectors() {
        try {
            console.log('üîÑ Buscando conectores...');
            const data = await this.makeAuthenticatedRequest('/connectors');
            const connectors = data.results || data;
            console.log(`‚úÖ ${connectors.length} conectores encontrados`);
            return connectors;
        } catch (error) {
            console.error('‚ùå Erro ao buscar conectores:', error);
            throw error;
        }
    }

    // Criar conex√£o com banco
    async createConnection(connectorId, credentials) {
        try {
            console.log('üîÑ Criando conex√£o...', { connectorId, credentials });
            
            const requestBody = {
                connectorId: connectorId,
                credentials: credentials
            };
            
            const data = await this.makeAuthenticatedRequest('/connections', {
                method: 'POST',
                body: JSON.stringify(requestBody)
            });
            
            console.log('‚úÖ Conex√£o criada:', data);
            return data;
        } catch (error) {
            console.error('‚ùå Erro ao criar conex√£o:', error);
            throw error;
        }
    }

    // Listar conex√µes
    async getConnections() {
        try {
            console.log('üîÑ Buscando conex√µes...');
            const data = await this.makeAuthenticatedRequest('/connections');
            const connections = data.results || data;
            console.log(`‚úÖ ${connections.length} conex√µes encontradas`);
            return connections;
        } catch (error) {
            console.error('‚ùå Erro ao buscar conex√µes:', error);
            throw error;
        }
    }

    // Buscar contas de uma conex√£o
    async getAccounts(connectionId) {
        try {
            console.log('üîÑ Buscando contas...', connectionId);
            const data = await this.makeAuthenticatedRequest(`/accounts?connectionId=${connectionId}`);
            const accounts = data.results || data;
            console.log(`‚úÖ ${accounts.length} contas encontradas`);
            return accounts;
        } catch (error) {
            console.error('‚ùå Erro ao buscar contas:', error);
            throw error;
        }
    }

    // Buscar transa√ß√µes de uma conta
    async getTransactions(accountId, from = null, to = null) {
        try {
            console.log('üîÑ Buscando transa√ß√µes...', accountId);
            
            let endpoint = `/transactions?accountId=${accountId}`;
            if (from) endpoint += `&from=${from}`;
            if (to) endpoint += `&to=${to}`;
            
            const data = await this.makeAuthenticatedRequest(endpoint);
            const transactions = data.results || data;
            console.log(`‚úÖ ${transactions.length} transa√ß√µes encontradas`);
            return transactions;
        } catch (error) {
            console.error('‚ùå Erro ao buscar transa√ß√µes:', error);
            throw error;
        }
    }

    // Utilit√°rios
    formatCurrency(value) {
        return new Intl.NumberFormat('pt-BR', {
            style: 'currency',
            currency: 'BRL'
        }).format(value);
    }

    formatDate(dateString) {
        return new Date(dateString).toLocaleDateString('pt-BR');
    }

    // Limpar dados salvos
    clearSavedData() {
        localStorage.removeItem('pluggy_api_key');
        localStorage.removeItem('pluggy_token_expiry');
        this.apiKey = null;
        this.tokenExpiry = null;
        console.log('üóëÔ∏è Dados salvos limpos');
    }

    // Diagn√≥stico completo
    async runDiagnostics() {
        console.log('üîç === DIAGN√ìSTICO COMPLETO ===');
        
        try {
            console.log('1. Testando autentica√ß√£o...');
            await this.authenticate();
            console.log('‚úÖ Autentica√ß√£o OK');
            
            console.log('2. Testando conectores...');
            const connectors = await this.getConnectors();
            console.log(`‚úÖ ${connectors.length} conectores encontrados`);
            
            console.log('3. Testando conex√µes...');
            const connections = await this.getConnections();
            console.log(`‚úÖ ${connections.length} conex√µes encontradas`);
            
            console.log('üîç === DIAGN√ìSTICO CONCLU√çDO COM SUCESSO ===');
            
            return {
                authentication: true,
                connectors: connectors.length,
                connections: connections.length
            };
        } catch (error) {
            console.error('‚ùå Erro no diagn√≥stico:', error);
            return {
                authentication: false,
                error: error.message
            };
        }
    }
}

// Tornar dispon√≠vel globalmente
window.PluggyManager = PluggyManager;

// Fun√ß√£o de diagn√≥stico global
window.runPluggyDiagnostics = async function() {
    if (window.pluggyManager) {
        return await window.pluggyManager.runDiagnostics();
    } else {
        console.error('‚ùå PluggyManager n√£o inicializado');
        return null;
    }
};

console.log('‚úÖ PluggyManager Corrigido carregado!');

