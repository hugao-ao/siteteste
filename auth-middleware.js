// auth-middleware.js - Sistema de Autentica√ß√£o e Seguran√ßa (VERS√ÉO CORRIGIDA)

// Sistema de Autentica√ß√£o e Middleware de Seguran√ßa
window.AuthMiddleware = {
    // Verificar se o usu√°rio est√° autenticado
    verificarAutenticacao() {
        // Verificar APENAS sessionStorage - sem fallback para localStorage
        const usuario = sessionStorage.getItem('usuario');
        const nivel = sessionStorage.getItem('nivel');
        
        const logado = !!(usuario && nivel);
        
        console.log('üîç Verifica√ß√£o de autentica√ß√£o (APENAS sessionStorage):', {
            usuario: usuario,
            nivel: nivel,
            resultado: logado ? 'LOGADO' : 'N√ÉO LOGADO'
        });
        
        return logado;
    },

    // Salvar dados de login
    salvarDadosLogin(dados) {
        Object.keys(dados).forEach(key => {
            sessionStorage.setItem(key, dados[key]);
        });
        console.log('‚úÖ Dados de login salvos no sessionStorage');
    },

    // Limpar dados de login
    limparDadosLogin() {
        ['usuario', 'nivel', 'projeto', 'user_id', 'id'].forEach(key => {
            sessionStorage.removeItem(key);
            localStorage.removeItem(key);
        });
        console.log('üóëÔ∏è Dados de login limpos');
    },

    // Verificar se h√° redirecionamento pendente ap√≥s login
    verificarRedirecionamentoPendente() {
        const redirectUrl = localStorage.getItem('redirect_after_login');
        if (redirectUrl && this.verificarAutenticacao()) {
            localStorage.removeItem('redirect_after_login');
            window.location.href = redirectUrl;
            return true;
        }
        return false;
    },

    // Redirecionar para login com informa√ß√µes do link atual
    redirecionarParaLogin(mensagem = 'Acesso negado. Fa√ßa login para continuar.') {
        // Salvar URL atual para redirecionamento ap√≥s login
        const urlAtual = window.location.href;
        localStorage.setItem('redirect_after_login', urlAtual);
        
        alert(mensagem);
        window.location.href = 'index.html';
    },

    // Verificar permiss√£o de projeto
    verificarPermissaoProjeto(projetoRequerido) {
        const nivel = sessionStorage.getItem('nivel');
        const projeto = sessionStorage.getItem('projeto');
        
        // Admin tem acesso a tudo
        if (nivel === 'admin') {
            return true;
        }
        
        // Usu√°rio deve ter o projeto espec√≠fico
        if (nivel === 'usuario' && projeto === projetoRequerido) {
            return true;
        }
        
        return false;
    },

    // Proteger p√°gina inteira
    protegerPagina(projetoRequerido = null) {
        // Verificar autentica√ß√£o b√°sica
        if (!this.verificarAutenticacao()) {
            this.redirecionarParaLogin('Voc√™ precisa estar logado para acessar esta p√°gina.');
            return false;
        }
        
        // Verificar permiss√£o de projeto se especificado
        if (projetoRequerido && !this.verificarPermissaoProjeto(projetoRequerido)) {
            this.redirecionarParaLogin(`Acesso negado. Esta p√°gina √© restrita ao projeto ${projetoRequerido}.`);
            return false;
        }
        
        return true;
    },

    // Proteger diagn√≥stico
    async protegerDiagnostico(linkUnico) {
        if (!this.verificarAutenticacao()) {
            this.redirecionarParaLogin('Voc√™ precisa estar logado para acessar este diagn√≥stico.');
            return false;
        }
        return true;
    }
};

console.log('üõ°Ô∏è AuthMiddleware carregado com sucesso');

